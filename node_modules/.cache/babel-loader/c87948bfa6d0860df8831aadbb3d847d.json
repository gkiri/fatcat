{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\n\nexport function invoke(_x, _x2, _x3, _x4) {\n  return _invoke.apply(this, arguments);\n}\n\nfunction _invoke() {\n  _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId, accounts, data, provider) {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            programId = translateAddress(programId);\n\n            if (!provider) {\n              provider = getProvider();\n            }\n\n            tx = new Transaction();\n            tx.add(new TransactionInstruction({\n              programId: programId,\n              keys: accounts !== null && accounts !== void 0 ? accounts : [],\n              data: data\n            }));\n            _context.next = 6;\n            return provider.send(tx);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _invoke.apply(this, arguments);\n}\n\nexport function getMultipleAccounts(_x5, _x6) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, publicKeys) {\n    var args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: \"recent\"\n            }]; // @ts-ignore\n\n            _context2.next = 3;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 3:\n            res = _context2.sent;\n\n            if (!res.error) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 6:\n            assert(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context2.prev = 9;\n\n            _iterator.s();\n\n          case 11:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 23;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context2.next = 17;\n              break;\n            }\n\n            accounts.push(null);\n            return _context2.abrupt(\"continue\", 21);\n\n          case 17:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 20:\n            accounts.push(value);\n\n          case 21:\n            _context2.next = 11;\n            break;\n\n          case 23:\n            _context2.next = 28;\n            break;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](9);\n\n            _iterator.e(_context2.t0);\n\n          case 28:\n            _context2.prev = 28;\n\n            _iterator.f();\n\n            return _context2.finish(28);\n\n          case 31:\n            return _context2.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[9, 25, 28, 31]]);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/utils/rpc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import assert from \"assert\";\nimport { PublicKey, Transaction, TransactionInstruction, } from \"@solana/web3.js\";\nimport { translateAddress } from \"../program/common\";\nimport { getProvider } from \"../provider\";\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nexport async function invoke(programId, accounts, data, provider) {\n    programId = translateAddress(programId);\n    if (!provider) {\n        provider = getProvider();\n    }\n    const tx = new Transaction();\n    tx.add(new TransactionInstruction({\n        programId,\n        keys: accounts !== null && accounts !== void 0 ? accounts : [],\n        data,\n    }));\n    return await provider.send(tx);\n}\nexport async function getMultipleAccounts(connection, publicKeys) {\n    const args = [publicKeys.map((k) => k.toBase58()), { commitment: \"recent\" }];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\n    if (res.error) {\n        throw new Error(\"failed to get info about accounts \" +\n            publicKeys.map((k) => k.toBase58()).join(\", \") +\n            \": \" +\n            res.error.message);\n    }\n    assert(typeof res.result !== \"undefined\");\n    const accounts = [];\n    for (const account of res.result.value) {\n        let value = null;\n        if (account === null) {\n            accounts.push(null);\n            continue;\n        }\n        if (res.result.value) {\n            const { executable, owner, lamports, data } = account;\n            assert(data[1] === \"base64\");\n            value = {\n                executable,\n                owner: new PublicKey(owner),\n                lamports,\n                data: Buffer.from(data[0], \"base64\"),\n            };\n        }\n        if (value === null) {\n            throw new Error(\"Invalid response\");\n        }\n        accounts.push(value);\n    }\n    return accounts.map((account, idx) => {\n        if (account === null) {\n            return null;\n        }\n        return {\n            publicKey: publicKeys[idx],\n            account,\n        };\n    });\n}\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}