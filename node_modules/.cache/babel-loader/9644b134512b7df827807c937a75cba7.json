{"ast":null,"code":"import * as anchor from \"@project-serum/anchor\";\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\");\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nexport const awaitTransactionSignatureConfirmation = async (txid, timeout, connection, commitment = \"recent\", queryStatus = false) => {\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    try {\n      subId = connection.onSignature(txid, (result, context) => {\n        done = true;\n        status = {\n          err: result.err,\n          slot: context.slot,\n          confirmations: 0\n        };\n\n        if (result.err) {\n          console.log(\"Rejected via websocket\", result.err);\n          reject(status);\n        } else {\n          console.log(\"Resolved via websocket\", result);\n          resolve(status);\n        }\n      }, commitment);\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n/* export */\n\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n};\n\nexport const getCandyMachineState = async (anchorWallet, candyMachineId, connection) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\"\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program\n  };\n  const state = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate\n  };\n};\n\nconst getMasterEdition = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from(\"edition\")], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getMetadata = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getTokenWallet = async (wallet, mint) => {\n  return (await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID))[0];\n};\n\nexport const mintOneToken = async (candyMachine, config, payer, treasury) => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const {\n    connection,\n    program\n  } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n  const rent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY\n    },\n    signers: [mint],\n    instructions: [anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: rent,\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(token, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, payer, [], 1)]\n  });\n};\nexport const shortenAddress = (address, chars = 4) => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};","map":{"version":3,"sources":["/home/gude/Gkiran_Area/wbst/fatcat/src/candy-machine.ts"],"names":["anchor","MintLayout","TOKEN_PROGRAM_ID","Token","CANDY_MACHINE_PROGRAM","web3","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","signatureStatuses","getSignatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","Provider","preflightCommitment","idl","Program","fetchIdl","program","candyMachine","id","state","account","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","token","publicKey","metadata","masterEdition","rent","getMinimumBalanceForRentExemption","span","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms"],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"]},"metadata":{},"sourceType":"module"}