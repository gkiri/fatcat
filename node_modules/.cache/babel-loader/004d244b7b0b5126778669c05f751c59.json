{"ast":null,"code":"import _regeneratorRuntime from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport var ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport var AccountsCoder = /*#__PURE__*/function () {\n  function AccountsCoder(idl) {\n    _classCallCheck(this, AccountsCoder);\n\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  _createClass(AccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n                layout = this.accountLayouts.get(accountName);\n                len = layout.encode(account, buffer);\n                accountData = buffer.slice(0, len);\n                _context.next = 6;\n                return accountDiscriminator(accountName);\n\n              case 6:\n                discriminator = _context.sent;\n                return _context.abrupt(\"return\", Buffer.concat([discriminator, accountData]));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(8);\n      var layout = this.accountLayouts.get(accountName);\n      return layout.decode(data);\n    }\n  }]);\n\n  return AccountsCoder;\n}(); // Calculates unique 8 byte discriminator prepended to all anchor accounts.\n\nexport function accountDiscriminator(_x3) {\n  return _accountDiscriminator.apply(this, arguments);\n}\n\nfunction _accountDiscriminator() {\n  _accountDiscriminator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", Buffer.from(sha256.digest(\"account:\".concat(name))).slice(0, 8));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _accountDiscriminator.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/coder/accounts.ts"],"names":[],"mappings":";;;;AAEA,SAAS,QAAT,QAAyB,OAAzB;AACA,SAAS,MAAT,QAAuB,WAAvB;AAEA;;AAEG;;AACH,OAAO,IAAM,0BAA0B,GAAG,CAAnC;AAEP;;AAEG;;AACH,WAAa,aAAb;AAME,yBAAmB,GAAnB,EAA2B;AAAA;;AACzB,QAAI,GAAG,CAAC,QAAJ,KAAiB,SAArB,EAAgC;AAC9B,WAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AACA;AACD;;AACD,QAAM,OAAO,GAAuB,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAiB,UAAC,GAAD,EAAQ;AAC3D,aAAO,CAAC,GAAG,CAAC,IAAL,EAAW,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,GAAG,CAAC,KAAhC,CAAX,CAAP;AACD,KAFmC,CAApC;AAIA,SAAK,cAAL,GAAsB,IAAI,GAAJ,CAAQ,OAAR,CAAtB;AACD;;AAhBH;AAAA;AAAA;AAAA,6EAkBS,iBACL,WADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,gBAAA,MAJD,GAIU,MAAM,CAAC,KAAP,CAAa,IAAb,CAJV,EAI8B;;AAC7B,gBAAA,MALD,GAKU,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CALV;AAMC,gBAAA,GAND,GAMO,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CANP;AAOD,gBAAA,WAPC,GAOa,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAPb;AAAA;AAAA,uBAQqB,oBAAoB,CAAC,WAAD,CARzC;;AAAA;AAQD,gBAAA,aARC;AAAA,iDASE,MAAM,CAAC,MAAP,CAAc,CAAC,aAAD,EAAgB,WAAhB,CAAd,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA8BS,gBAAgB,WAAhB,EAAqC,EAArC,EAA+C;AACpD;AACA,UAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,CAAb;AACA,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CAAf;AACA,aAAO,MAAM,CAAC,MAAP,CAAc,IAAd,CAAP;AACD;AAnCH;;AAAA;AAAA,I,CAsCA;;AACA,gBAAsB,oBAAtB;AAAA;AAAA;;;mFAAO,kBAAoC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,mBAAyB,IAAzB,EAAZ,EAA8C,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\nexport class AccountsCoder {\n    constructor(idl) {\n        if (idl.accounts === undefined) {\n            this.accountLayouts = new Map();\n            return;\n        }\n        const layouts = idl.accounts.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        this.accountLayouts = new Map(layouts);\n    }\n    async encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.accountLayouts.get(accountName);\n        const len = layout.encode(account, buffer);\n        let accountData = buffer.slice(0, len);\n        let discriminator = await accountDiscriminator(accountName);\n        return Buffer.concat([discriminator, accountData]);\n    }\n    decode(accountName, ix) {\n        // Chop off the discriminator before decoding.\n        const data = ix.slice(8);\n        const layout = this.accountLayouts.get(accountName);\n        return layout.decode(data);\n    }\n}\n// Calculates unique 8 byte discriminator prepended to all anchor accounts.\nexport async function accountDiscriminator(name) {\n    return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n}\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"module"}