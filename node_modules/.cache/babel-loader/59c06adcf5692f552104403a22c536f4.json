{"ast":null,"code":"import _regeneratorRuntime from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gude/Gkiran_Area/wbst/fatcat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountDiscriminator, accountSize } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\n\nvar AccountFactory = /*#__PURE__*/function () {\n  function AccountFactory() {\n    _classCallCheck(this, AccountFactory);\n  }\n\n  _createClass(AccountFactory, null, [{\n    key: \"build\",\n    value: function build(idl, coder, programId, provider) {\n      var accountFns = {};\n      idl.accounts.forEach(function (idlAccount) {\n        var name = camelCase(idlAccount.name);\n        accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n      });\n      return accountFns;\n    }\n  }]);\n\n  return AccountFactory;\n}();\n\nexport { AccountFactory as default };\nexport var AccountClient = /*#__PURE__*/function () {\n  function AccountClient(idl, idlAccount, programId, provider, coder) {\n    _classCallCheck(this, AccountClient);\n\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n    this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n    this._size = ACCOUNT_DISCRIMINATOR_SIZE + accountSize(idl, idlAccount);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n\n\n  _createClass(AccountClient, [{\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */\n\n  }, {\n    key: \"programId\",\n    get: function get() {\n      return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n\n  }, {\n    key: \"coder\",\n    get: function get() {\n      return this._coder;\n    }\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        var accountInfo, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._provider.connection.getAccountInfo(translateAddress(address));\n\n              case 2:\n                accountInfo = _context.sent;\n\n                if (!(accountInfo === null)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist \".concat(address.toString()));\n\n              case 5:\n                _context.next = 7;\n                return accountDiscriminator(this._idlAccount.name);\n\n              case 7:\n                discriminator = _context.sent;\n\n                if (!discriminator.compare(accountInfo.data.slice(0, 8))) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Invalid account discriminator\");\n\n              case 10:\n                return _context.abrupt(\"return\", this._coder.accounts.decode(this._idlAccount.name, accountInfo.data));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Returns all instances of this account type for the program.\n     */\n\n  }, {\n    key: \"all\",\n    value: function () {\n      var _all = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filter) {\n        var _this = this;\n\n        var bytes, resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return accountDiscriminator(this._idlAccount.name);\n\n              case 2:\n                bytes = _context2.sent;\n\n                if (filter !== undefined) {\n                  bytes = Buffer.concat([bytes, filter]);\n                }\n\n                _context2.next = 6;\n                return this._provider.connection.getProgramAccounts(this._programId, {\n                  commitment: this._provider.connection.commitment,\n                  filters: [{\n                    memcmp: {\n                      offset: 0,\n                      bytes: bs58.encode(bytes)\n                    }\n                  }]\n                });\n\n              case 6:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", resp.map(function (_ref) {\n                  var pubkey = _ref.pubkey,\n                      account = _ref.account;\n                  return {\n                    publicKey: pubkey,\n                    account: _this._coder.accounts.decode(_this._idlAccount.name, account.data)\n                  };\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function all(_x2) {\n        return _all.apply(this, arguments);\n      }\n\n      return all;\n    }()\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(address, commitment) {\n      var _this2 = this;\n\n      if (subscriptions.get(address.toString())) {\n        return subscriptions.get(address.toString()).ee;\n      }\n\n      var ee = new EventEmitter();\n      address = translateAddress(address);\n\n      var listener = this._provider.connection.onAccountChange(address, function (acc) {\n        var account = _this2._coder.accounts.decode(_this2._idlAccount.name, acc.data);\n\n        ee.emit(\"change\", account);\n      }, commitment);\n\n      subscriptions.set(address.toString(), {\n        ee: ee,\n        listener: listener\n      });\n      return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(address) {\n      var sub = subscriptions.get(address.toString());\n\n      if (!sub) {\n        console.warn(\"Address is not subscribed\");\n        return;\n      }\n\n      if (subscriptions) {\n        this._provider.connection.removeAccountChangeListener(sub.listener).then(function () {\n          subscriptions.delete(address.toString());\n        }).catch(console.error);\n      }\n    }\n    /**\n     * Returns an instruction for creating this account.\n     */\n\n  }, {\n    key: \"createInstruction\",\n    value: function () {\n      var _createInstruction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signer, sizeOverride) {\n        var size;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                size = this.size;\n                _context3.t0 = SystemProgram;\n                _context3.t1 = this._provider.wallet.publicKey;\n                _context3.t2 = signer.publicKey;\n                _context3.t3 = sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size;\n                _context3.next = 7;\n                return this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size);\n\n              case 7:\n                _context3.t4 = _context3.sent;\n                _context3.t5 = this._programId;\n                _context3.t6 = {\n                  fromPubkey: _context3.t1,\n                  newAccountPubkey: _context3.t2,\n                  space: _context3.t3,\n                  lamports: _context3.t4,\n                  programId: _context3.t5\n                };\n                return _context3.abrupt(\"return\", _context3.t0.createAccount.call(_context3.t0, _context3.t6));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function createInstruction(_x3, _x4) {\n        return _createInstruction.apply(this, arguments);\n      }\n\n      return createInstruction;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated account. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associated\",\n    value: function () {\n      var _associated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var addr,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.associatedAddress.apply(this, _args4);\n\n              case 2:\n                addr = _context4.sent;\n                _context4.next = 5;\n                return this.fetch(addr);\n\n              case 5:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function associated() {\n        return _associated.apply(this, arguments);\n      }\n\n      return associated;\n    }()\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated address. Args are keys to associate.\n     * Order matters.\n     */\n\n  }, {\n    key: \"associatedAddress\",\n    value: function () {\n      var _associatedAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _len,\n            args,\n            _key,\n            _args5 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len = _args5.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = _args5[_key];\n                }\n\n                _context5.next = 3;\n                return pubkeyUtil.associated.apply(pubkeyUtil, [this._programId].concat(args));\n\n              case 3:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function associatedAddress() {\n        return _associatedAddress.apply(this, arguments);\n      }\n\n      return associatedAddress;\n    }()\n  }]);\n\n  return AccountClient;\n}(); // Tracks all subscriptions.\n\nvar subscriptions = new Map();","map":{"version":3,"sources":["../../../../src/program/namespace/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport EventEmitter from \"eventemitter3\";\nimport * as bs58 from \"bs58\";\nimport { SystemProgram, } from \"@solana/web3.js\";\nimport Coder, { ACCOUNT_DISCRIMINATOR_SIZE, accountDiscriminator, accountSize, } from \"../../coder\";\nimport { translateAddress } from \"../common\";\nimport { getProvider } from \"../../\";\nimport * as pubkeyUtil from \"../../utils/pubkey\";\nexport default class AccountFactory {\n    static build(idl, coder, programId, provider) {\n        const accountFns = {};\n        idl.accounts.forEach((idlAccount) => {\n            const name = camelCase(idlAccount.name);\n            accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n        });\n        return accountFns;\n    }\n}\nexport class AccountClient {\n    constructor(idl, idlAccount, programId, provider, coder) {\n        this._idlAccount = idlAccount;\n        this._programId = programId;\n        this._provider = provider !== null && provider !== void 0 ? provider : getProvider();\n        this._coder = coder !== null && coder !== void 0 ? coder : new Coder(idl);\n        this._size = ACCOUNT_DISCRIMINATOR_SIZE + accountSize(idl, idlAccount);\n    }\n    /**\n     * Returns the number of bytes in this account.\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * Returns the program ID owning all accounts.\n     */\n    get programId() {\n        return this._programId;\n    }\n    /**\n     * Returns the client's wallet and network provider.\n     */\n    get provider() {\n        return this._provider;\n    }\n    /**\n     * Returns the coder.\n     */\n    get coder() {\n        return this._coder;\n    }\n    /**\n     * Returns a deserialized account.\n     *\n     * @param address The address of the account to fetch.\n     */\n    async fetch(address) {\n        const accountInfo = await this._provider.connection.getAccountInfo(translateAddress(address));\n        if (accountInfo === null) {\n            throw new Error(`Account does not exist ${address.toString()}`);\n        }\n        // Assert the account discriminator is correct.\n        const discriminator = await accountDiscriminator(this._idlAccount.name);\n        if (discriminator.compare(accountInfo.data.slice(0, 8))) {\n            throw new Error(\"Invalid account discriminator\");\n        }\n        return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);\n    }\n    /**\n     * Returns all instances of this account type for the program.\n     */\n    async all(filter) {\n        let bytes = await accountDiscriminator(this._idlAccount.name);\n        if (filter !== undefined) {\n            bytes = Buffer.concat([bytes, filter]);\n        }\n        let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n            commitment: this._provider.connection.commitment,\n            filters: [\n                {\n                    memcmp: {\n                        offset: 0,\n                        bytes: bs58.encode(bytes),\n                    },\n                },\n            ],\n        });\n        return resp.map(({ pubkey, account }) => {\n            return {\n                publicKey: pubkey,\n                account: this._coder.accounts.decode(this._idlAccount.name, account.data),\n            };\n        });\n    }\n    /**\n     * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n     * changes.\n     */\n    subscribe(address, commitment) {\n        if (subscriptions.get(address.toString())) {\n            return subscriptions.get(address.toString()).ee;\n        }\n        const ee = new EventEmitter();\n        address = translateAddress(address);\n        const listener = this._provider.connection.onAccountChange(address, (acc) => {\n            const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n            ee.emit(\"change\", account);\n        }, commitment);\n        subscriptions.set(address.toString(), {\n            ee,\n            listener,\n        });\n        return ee;\n    }\n    /**\n     * Unsubscribes from the account at the given address.\n     */\n    unsubscribe(address) {\n        let sub = subscriptions.get(address.toString());\n        if (!sub) {\n            console.warn(\"Address is not subscribed\");\n            return;\n        }\n        if (subscriptions) {\n            this._provider.connection\n                .removeAccountChangeListener(sub.listener)\n                .then(() => {\n                subscriptions.delete(address.toString());\n            })\n                .catch(console.error);\n        }\n    }\n    /**\n     * Returns an instruction for creating this account.\n     */\n    async createInstruction(signer, sizeOverride) {\n        const size = this.size;\n        return SystemProgram.createAccount({\n            fromPubkey: this._provider.wallet.publicKey,\n            newAccountPubkey: signer.publicKey,\n            space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n            lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n            programId: this._programId,\n        });\n    }\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated account. Args are keys to associate.\n     * Order matters.\n     */\n    async associated(...args) {\n        const addr = await this.associatedAddress(...args);\n        return await this.fetch(addr);\n    }\n    /**\n     * @deprecated since version 14.0.\n     *\n     * Function returning the associated address. Args are keys to associate.\n     * Order matters.\n     */\n    async associatedAddress(...args) {\n        return await pubkeyUtil.associated(this._programId, ...args);\n    }\n}\n// Tracks all subscriptions.\nconst subscriptions = new Map();\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"module"}